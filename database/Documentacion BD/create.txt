/**
 * CREATE DATABASE IF NOT EXISTS avengers2;
 *
 * Descripción: Crea la base de datos "avengers2" si no existe.
 */

/**
 * CREATE SCHEMA IF NOT EXISTS avengers2;
 *
 * Descripción: Crea el esquema "avengers2" si no existe.
 */

/**
 * USE avengers2;
 *
 * Descripción: Establece la base de datos activa en "avengers2".
 */

/**
 * CREATE TABLE `actor` (
 *   `actorCI` int auto_increment,
 *   `actorNombre1` varchar(60) NOT NULL,
 *   `actorNombre2` varchar(60),
 *   `actorApell1` varchar(60) NOT NULL,
 *   `actorApell2` varchar(60),
 *   PRIMARY KEY (`actorCI`)
 * );
 *
 * Descripción: Crea la tabla "actor" con columnas para el identificador del actor, nombres y apellidos.
 */

/**
 * CREATE TABLE `plataforma` (
 *   `platfID` int auto_increment,
 *   `platfNombre` varchar(60),
 *   PRIMARY KEY (`platfID`)
 * );
 *
 * Descripción: Crea la tabla "plataforma" con columnas para el identificador de la plataforma y su nombre.
 */

/**
 * CREATE TABLE `cargo` (
 *   `cargoID` int auto_increment,
 *   `cargoNombre` varchar(60) NOT NULL,
 *   PRIMARY KEY (`cargoID`)
 * );
 *
 * Descripción: Crea la tabla "cargo" con columnas para el identificador del cargo y su nombre.
 */

/**
 * CREATE TABLE `color` (
 *   `colorHEX` varchar(60),
 *   `colorNombre` varchar(60) NOT NULL,
 *   `colorDescripcion` varchar(60) NOT NULL,
 *   PRIMARY KEY (`colorHEX`)
 * );
 *
 * Descripción: Crea la tabla "color" con columnas para el código hexadecimal del color, su nombre y descripción.
 */

/**
 * CREATE TABLE `combate` (
 *   `combateID` int auto_increment,
 *   `objetoID_fk` int,
 *   `poderID_fk` int,
 *   `combateLugar` int NOT NULL,
 *   `combateFecha` date NOT NULL,
 *   `combateDescrp` varchar(60),
 *   PRIMARY KEY (`combateID`, `objetoID_fk`, `poderID_fk`)
 * );
 *
 * Descripción: Crea la tabla "combate" con columnas para el identificador del combate, referencias a objetos y poderes,
 * lugar del combate, fecha y descripción.
 */

/**
 * CREATE TABLE `compannia` (
 *   `companniaID` int auto_increment,
 *   `companniaNombre` varchar(60) NOT NULL,
 *   `companniaDescrp` varchar(60),
 *   PRIMARY KEY (`companniaID`)
 * );
 *
 * Descripción: Crea la tabla "compannia" con columnas para el identificador de la compañía, su nombre y descripción.
 */

/**
 * CREATE TABLE `creador` (
 *   `creadorID` int auto_increment,
 *   `creadorNombre` varchar(60) NOT NULL,
 *   PRIMARY KEY (`creadorID`)
 * );
 *
 * Descripción: Crea la tabla "creador" con columnas para el identificador del creador y su nombre.
 */

/**
 * CREATE TABLE `director` (
 *   `directorCI` int auto_increment,
 *   `directorNombre` varchar(60),
 *   PRIMARY KEY (`directorCI`)
 * );
 *
 * Descripción: Crea la tabla "director" con columnas para el identificador del director y su nombre.
 */

/**
 * CREATE TABLE `heroeVillanoCivil` (
 *   `heroeVillanoCivID` int auto_increment,
 *   `persHeroeID_fk` int,
 *   `persCivilID_fk` int,
 *   `persVillanoID_fk` int,
 *   PRIMARY KEY (`heroeVillanoCivID`)
 * );
 *
 * Descripción: Crea la tabla "heroeVillanoCivil" con columnas para el identificador de héroe/villano/civil y sus relaciones.
 */

/**
 * CREATE TABLE `heroeVillanoEnfrentados` (
 *   `persHeroeID` int,
 *   `persVillanoID` int,
 *   PRIMARY KEY (`persHeroeID`,`persVillanoID`)
 * );
 *
 * Descripción: Crea la tabla "heroeVillanoEnfrentados" con columnas para las relaciones de enfrentamiento entre héroes y villanos.
 */

/**
 * CREATE TABLE `historial` (
 *   `medID` int,
 *   `perfilID` int,
 *   `usuEmail` varchar(60),
 *   PRIMARY KEY (`medID`,`perfilID`,`usuEmail`)
 * );
 *
 * Descripción: Crea la tabla "historial" con columnas para el identificador del medio, perfil de usuario, email del usuario.
 */

/**
 * CREATE TABLE `lugar` (
 *   `lugarID` int auto_increment,
 *   `lugarNombre` varchar(60),
 *   `lugarFicticio` boolean default 1,
 *   `lugarTipo` VARCHAR(20),
 *   `lugar_id` int,
 *   PRIMARY KEY (`lugarID`)
 * );
 *
 * Descripción: Crea la tabla "lugar" con columnas para el identificador del lugar, su nombre, si es ficticio, tipo y referencia a otro lugar.
 */

/**
 * CREATE TABLE `medComic` (
 *   `medComID` int auto_increment,
 *   `medComNroTomo` int,
 *   PRIMARY KEY (`medComID`)
 * );
 *
 * Descripción: Crea la tabla "medComic" con columnas para el identificador del medio de cómic y el número de tomo.
 */

/**
 * CREATE TABLE `medPais` (
 *   `med_id` int,
 *   `lugar_id` int,
 *   primary key (`med_id`, `lugar_id`)
 * );
 *
 * Descripción: Crea la tabla "medPais" con columnas para el identificador del medio y del país asociado.
 */

/**
 * CREATE TABLE `medPelicula` (
 *   `medPelID` INT NOT NULL AUTO_INCREMENT,
 *   `medPelDirectorCI` INT,
 *   `medPelDuracion` TIME,
 *   `medPelTipo` ENUM('Animada', 'Liveaction', 'Caricatura'),
 *   `medPelCostProd` NUMERIC(10,2),
 *   `medPelGananc` NUMERIC(10,2),
 *   `medPelDistrib` INT,
 *   PRIMARY KEY (`medPelID`)
 * );
 *
 * Descripción: Crea la tabla "medPelicula" con columnas para el identificador del medio de película, director, duración,
 * tipo, costo de producción, ganancia y distribuidor.
 */

/**
 * CREATE TABLE `medSerie` (
 *   `medSerID` INT NOT NULL AUTO_INCREMENT,
 *   `medSerCreador` INT,
 *   `medSerTotEps` INT,
 *   `medSerCanalTrans` VARCHAR(60),
 *   `medSerTipo` ENUM('Animado', 'Liveaction', 'Caricatura'),
 *   PRIMARY KEY (`medSerID`)
 * );
 *
 * Descripción: Crea la tabla "medSerie" con columnas para el identificador del medio de serie, creador, total de episodios,
 * canal de transmisión y tipo.
 */

/**
 * CREATE TABLE `medVidPlatf` (
 *   `medVid_id` int,
 *   `medVidTipJuego` varchar(60),
 *   `platf_id` int
 * );
 *
 * Descripción: Crea la tabla "medVidPlatf" con columnas para el identificador del medio de videojuego, tipo de juego y
 * referencia a la plataforma.
 */

/**
 * CREATE TABLE `medVideojuego` (
 *   `medVidjID` INT NOT NULL AUTO_INCREMENT,
 *   `medVidjTipJuego` ENUM('Accion', 'Aventura', 'Arcade', 'Estrategia', 'Simulacion', 'Musical'),
 *   `medVidjCompPubl` INT,
 *   PRIMARY KEY (`medVidjID`)
 * );
 *
 * Descripción: Crea la tabla "medVideojuego" con columnas para el identificador del medio de videojuego, tipo de juego
 * y compañía publicadora.
 */

/**
 * CREATE TABLE `medio` (
 *   `medID` int auto_increment,
 *   `medTitulo` varchar(60),
 *   `medFechEstreno` date,
 *   `companniaCreadProdID` int,
 *   `medSinopsis` varchar(60),
 *   `medPelicula` int,
 *   `medSerie` int,
 *   `medVideojuego` int,
 *   `medComic` int,
 *   PRIMARY KEY (`medID`)
 * );
 *
 * Descripción: Crea la tabla "medio" con columnas para el identificador del medio, título, fecha de estreno,
 * identificador de compañía de producción, sinopsis y referencias a los medios específicos.
 */

/**
 * CREATE TABLE `miLista` (
 *   `usuEmail` varchar(60),
 *   `perfilID` int,
 *   `medID` int,
 *   PRIMARY KEY (`usuEmail`, `perfilID`, `medID`)
 * );
 *
 * Descripción: Crea la tabla "miLista" con columnas para el email del usuario, identificador del perfil y del medio.
 */

/**
 * CREATE TABLE `objeto` (
 *   `objetoID` int auto_increment,
 *   `objetoNombre` varchar(60),
 *   `objetoMaterialFabricacion` varchar(60),
 *   `objetoTipoFK` int,
 *   `objetoDescripcion` varchar(60),
 *   PRIMARY KEY (`objetoID`)
 * );
 *
 * Descripción: Crea la tabla "objeto" con columnas para el identificador del objeto, nombre, material de fabricación,
 * tipo de objeto y descripción.
 */

/**
 * CREATE TABLE `ocupacion` (
 *   `ocupacionID` int auto_increment,
 *   `ocupacionNombre` varchar(60),
 *   PRIMARY KEY (`ocupacionID`)
 * );
 *
 * Descripción: Crea la tabla "ocupacion" con columnas para el identificador de la ocupación y su nombre.
 */

/**
 * CREATE TABLE `orgMed` (
 *   `org_id` INT,
 *   `med_id` INT,
 *   `fecha` DATE,
 *   `orgMedTipo` ENUM('Protagonista', 'Enemiga', 'Secundaria'),
 *   `orgMedEdoFinal` ENUM('Protagonista', 'Enemiga', 'Secundaria'),
 *   PRIMARY KEY (`fecha`)
 * );
 *
 * Descripción: Crea la tabla "orgMed" con columnas para el identificador de la organización, identificador del medio,
 * fecha, tipo de relación organización-medio y estado final de la relación.
 */

/**
 * CREATE TABLE `organizacion` (
 *   `orgID` int auto_increment,
 *   `orgNombre` varchar(60),
 *   `orgEslogan` varchar(60),
 *   `orgLiderMasConocido` int,
 *   `orgTipoOrg` VARCHAR(20),
 *   `orgObjetivoPpal` varchar(60),
 *   `orgLugarCreacion` int,
 *   `orgFundador` int,
 *   `orgPrimerAparComics` int,
 *   PRIMARY KEY (`orgID`)
 * );
 *
 * Descripción: Crea la tabla "organizacion" con columnas para el identificador de la organización, nombre, eslogan,
 * líder más conocido, tipo de organización, objetivo principal, lugar de creación, fundador y primer aparición en cómics.
 */

/**
 * CREATE TABLE `perCargOrg` (
 *   `personaje_id` int,
 *   `cargo_id` int,
 *   `org_id` int
 * );
 *
 * Descripción: Crea la tabla "perCargOrg" con columnas para el identificador del personaje, cargo y organización.
 */

/**
 * CREATE TABLE `perMed` (
 *   `med_id` INT,
 *   `perMedTipo` ENUM('Protagonista', 'Enemiga', 'Secundaria'),
 *   `actorCI` INT,
 *   `perMedTipoInterpret` ENUM('Interprete', 'Voz'),
 *   PRIMARY KEY (`med_id`)
 * );
 *
 * Descripción: Crea la tabla "perMed" con columnas para el identificador del medio, tipo de relación personaje-medio,
 * identificador del actor y tipo de interpretación.
 */

/**
 * CREATE TABLE `perfil` (
 *   `usuEmail_id` varchar(60),
 *   `perfilID` int,
 *   `perfilNombre` varchar(60),
 *   `perfilIdiomaPref` varchar(60),
 *   `perfilEmail` varchar(60),
 *   PRIMARY KEY (`usuEmail_id`,`perfilID`)
 * );
 *
 * Descripción: Crea la tabla "perfil" con columnas para el email del usuario, identificador del perfil, nombre del perfil,
 * idioma de preferencia y email del perfil.
 */

/**
 * CREATE TABLE `persCivil` (
 *   `persCivilD` int auto_increment,
 *   `persCivilNombre` varchar(60),
 *   `id_personaje` int not null,
 *   PRIMARY KEY (`persCivilD`)
 * );
 *
 * Descripción: Crea la tabla "persCivil" con columnas para el identificador del personaje civil, nombre y referencia al personaje.
 */

/**
 * CREATE TABLE `persCreador` (
 *   `personajeID_fk` int,
 *   `creadorID_fk` int
 * );
 *
 * Descripción: Crea la tabla "persCreador" con columnas para la relación entre el identificador del personaje y el creador.
 */

/**
 * CREATE TABLE `persNacion` (
 *   `personaje_id` int,
 *   `nacionalidad_id` int
 * );
 *
 * Descripción: Crea la tabla "persNacion" con columnas para la relación entre el identificador del personaje y la nacionalidad.
 */

/**
 * CREATE TABLE `persObjeto` (
 *   `personaje_id` int,
 *   `objeto_id` int,
 *   primary key (`personaje_id`, `objeto_id`)
 * );
 *
 * Descripción: Crea la tabla "persObjeto" con columnas para la relación entre el identificador del personaje y el objeto.
 */

/**
 * CREATE TABLE `persOcupacion` (
 *   `personaje_id` int,
 *   `ocupacion_id` int,
 *   primary key (`personaje_id`, `ocupacion_id`)
 * );
 *
 * Descripción: Crea la tabla "persOcupacion" con columnas para la relación entre el identificador del personaje y la ocupación.
 */

/**
 * CREATE TABLE `persPoder` (
 *   `personajeID` INT,
 *   `poderID` INT,
 *   `obtencionPoder` ENUM('Natural', 'Artificial'),
 *   `personajeHerencia` INT,
 *   PRIMARY KEY (`personajeID`, `poderID`)
 * );
 *
 * Descripción: Crea la tabla "persPoder" con columnas para el identificador del personaje, identificador del poder,
 * forma de obtención del poder y herencia del personaje.
 */

/**
 * CREATE TABLE `persVillano` (
 *   `persVillanoID` int auto_increment PRIMARY KEY,
 *   `persVillanoNombre` varchar(60),
 *   `persVillanoObjetivo` varchar(60),
 *   `id_personaje` int not null
 * );
 *
 * Descripción: Crea la tabla "persVillano" con columnas para el identificador del personaje villano, nombre, objetivo y referencia al personaje.
 */

/**
 * CREATE TABLE `persHeroe` (
 *   `persHeroeID` int auto_increment,
 *   `superHeroeNombre` varchar(60),
 *   `superHeroeLogoTipo` BLOB,
 *   `id_personaje` int not null,
 *   PRIMARY KEY (`persHeroeID`)
 * );
 *
 * Descripción: Crea la tabla "persHeroe" con columnas para el identificador del personaje héroe, nombre, logo y referencia al personaje.
 */

/**
 * CREATE TABLE `personaje` (
 *   `personajeID` INT NOT NULL AUTO_INCREMENT,
 *   `perNombre1` VARCHAR(60),
 *   `perNombre2` VARCHAR(60),
 *   `perApellido1` VARCHAR(60),
 *   `perApellido2` VARCHAR(60),
 *   `perGenero` ENUM('M', 'F', 'DESC', 'OTRO'),
 *   `perColorPelo` VARCHAR(60),
 *   `perColorOjos` VARCHAR(60),
 *   `perEdoMarital` ENUM('Soltero', 'Soltera', 'Casado', 'Casada', 'Viudo', 'Viuda', 'Separado', 'Separada', 'Divorciado', 'Divorciada'),
 *   `perPrimeraAparicionComic` INT,
 *   `perFraseMasCelebre` VARCHAR(60),
 *   `personajeHeroe` INT,
 *   `personajeVillano` INT,
 *   `personajeCivil` INT,
 *   PRIMARY KEY (`personajeID`)
 * );
 *
 * Descripción: Crea la tabla "personaje" con columnas para el identificador del personaje, nombres, apellidos, género,
 * color de pelo, color de ojos, estado marital, primera aparición en cómics, frase más célebre y referencias a héroe,
 * villano y civil.
 */

/**
 * CREATE TABLE `poder` (
 *   `poderID` int auto_increment,
 *   `poderNombre` varchar(60) not null,
 *   `poderDescripcion`  varchar(60),
 *   PRIMARY KEY (`poderID`)
 * );
 *
 * Descripción: Crea la tabla "poder" con columnas para el identificador del poder, nombre y descripción.
 */

/**
 * CREATE TABLE `rating` (
 *   `med_id` INT,
 *   `usuEmail` VARCHAR(60),
 *   `perfil_id` INT,
 *   `ratingResenna` VARCHAR(60),
 *   `ratingPuntaje` ENUM('1', '2', '3', '4', '5'),
 *   PRIMARY KEY (`med_id`, `usuEmail`, `perfil_id`)
 * );
 *
 * Descripción: Crea la tabla "rating" con columnas para el identificador del medio, email del usuario, identificador del perfil,
 * reseña y puntaje.
 */

/**
 * CREATE TABLE `recomendacion` (
 *   `medID` int,
 *   `perfilID` int,
 *   `usuEmail` varchar(60),
 *   PRIMARY KEY (`medID`,`perfilID`,`usuEmail`)
 * );
 *
 * Descripción: Crea la tabla "recomendacion" con columnas para el identificador del medio, identificador del perfil y email del usuario.
 */

/**
 * CREATE TABLE `sede` (
 *   `org_id` int,
 *   `sedeID` int,
 *   `sedeNombre` varchar(60),
 *   `sedeTipoEdificacion` varchar(20),
 *   `sedeUbicacion` int,
 *   PRIMARY KEY (`sedeID`)
 * );
 *
 * Descripción: Crea la tabla "sede" con columnas para el identificador de la organización, identificador de la sede,
 * nombre de la sede, tipo de edificación y ubicación.
 */

/**
 * CREATE TABLE `tipoObjeto` (
 *   `tipoObjetoID` int auto_increment ,
 *   `tipoObjetoNombre` varchar(60),
 *   PRIMARY KEY (`tipoObjetoID`)
 * );
 *
 * Descripción: Crea la tabla "tipoObjeto" con columnas para el identificador del tipo de objeto y su nombre.
 */

/**
 * CREATE TABLE `trajeColor` (
 *   `persHeroe_id` int,
 *   `colorHEX_id` varchar(60),
 *   `detalleTrajeColor` varchar(60)
 * );
 *
 * Descripción: Crea la tabla "trajeColor" con columnas para el identificador del personaje héroe, identificador del color en hexadecimal
 * y detalle del color del traje.
 */

/**
 * CREATE TABLE usuario (
 * usuEmail varchar(60),
 * usuNombre1 varchar(60),
 * usuNombre2 varchar(60),
 * usuApell1 varchar(60),
 * usuApell2 varchar(60),
 * usuFechNac date,
 * usuPassword varchar(60),
 * usuUsername varchar(60),
 * usuPais int,
 * usuCiudad int,
 * usuTipoCuenta ENUM('gratis', 'vip', 'premium'),
 * PRIMARY KEY (usuEmail)
 * );
 *
 * Descripción: Crea la tabla "usuario" con columnas para el email del usuario, nombres, apellidos, fecha de nacimiento,
 * contraseña, nombre de usuario, país, ciudad y tipo de cuenta.
 */

/**
 * CREATE TABLE `nacionalidad` (
 *   `nacionalidadID` int auto_increment,
 *   `nacionalidadNombre` varchar(60),
 *   `nacionalidadLugar` int,
 *   PRIMARY KEY (`nacionalidadID`)
 * );
 *
 * Descripción: Crea la tabla "nacionalidad" con columnas para el identificador de la nacionalidad, nombre y lugar asociado.
 */
